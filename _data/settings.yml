Client:
  ClientName:
    type: string
    default: "simple-acme"
    description: The name of the client, which comes back in several 
      places like the scheduled task name, Windows event viewer, notification
      messages, user agent and the <code>ConfigurationPath</code>.

  ConfigurationPath:
    type: string
    subtype: path
    default: null
    nullBehaviour: resolves to <code>%programdata%\{Client.ClientName}\{ACME.DefaultBaseUri}</code>
    description: Change the location where the program stores 
      its (temporary) files.

  LogPath:
    type: string
    subtype: path
    default: null
    nullBehaviour: resolves to <code>{Client.ConfigurationPath}\Log</code>
    description: The path where log files for the past 31 days are stored.

  VersionCheck:
    type: bool
    default: "false"
    description: Automatically check for new versions at startup. 

UI:
  DateFormat:
    type: string
    default: "yyyy/M/d H:mm:ss"
    description: A string that is used to format the date of the 
      certificates friendly name. <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN">Documentation</a> 
      for possibilities is available from Microsoft.

  PageSize:
    type: number
    default: 50
    description: The number of items to display per page in list views.

  TextEncoding:
    type: string
    default: utf-8
    description: Encoding to use for the console output. A list of 
      possible values can be found <a href="https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding?view=netcore-3.0">here</a>. 
      For certain languages <code>"unicode"</code> might give better results 
      displaying the characters, but note that this reduces compatibility with 
      other programs processing the output.

  Color:
    Background:
      type: string
      description: When set to <code>"black"</code>, the background color 
        for the UI will be forced to black using VT100 escape sequences. 
        This only works in modern terminals, i.e. nothing before Windows 2016 
        / Windows 10.

ACME:
  DefaultBaseUri:
    type: string
    subtype: uri
    default: https://acme-v02.api.letsencrypt.org/
    description: Default ACME endpoint to use when none is specified with the command line. 
      The client will attempt to get the service directory from both the literal uri provided
      and the <code>/directory</code> path under it (which is the convention used by 
      Let's Encrypt, and therefor done for backwards compatibility reasons).
  
  DefaultBaseUriTest:
    type: string
    subtype: uri
    default: https://acme-staging-v02.api.letsencrypt.org/
    description: Default ACME endpoint to use when none is specified with the command line and the <code>‑‑test</code> switch is activated.
  
  DefaultBaseUriImport:
    type: string
    subtype: uri
    default: "https://acme-v01.api.letsencrypt.org/"
    description: Default ACMEv1 endpoint to import renewal settings from.
  
  PostAsGet:
    type: boolean
    default: true
    description: Use POST-as-GET mode as defined in <a href="https://datatracker.ietf.org/doc/html/rfc8555#section-6.3">RFC8555 section 6.3</a>, 
      as required by Let's Encrypt since November 2020.

  ValidateServerCertificate:
    type: boolean
    default: true
    description: Set this to <code>false</code> to disable certificate validation 
      of the ACME endpoint. Note that this is a security risk, it's only intended 
      to connect to internal/private ACME servers with self-signed certificates.

  RetryCount:
    type: number
    default: 15
    description: Maximum numbers of times to refresh validation and order 
      status, while waiting for the ACME server to complete its tasks.

  RetryInterval:
    type: number
    default: 5
    description: Amount of time in seconds to wait for each retry.

  PreferredIssuer:
    type: string
    description: In some exceptional cases an ACME service will offer multiple 
      certificates signed by different root authorities. This setting can be 
      used to give a preference. I.e. <code>"ISRG Root X1"</code> can be used 
      to prefer Let's Encrypt self-signed chain over the backwards compatible 
      <code>"DST Root CA X3"</code>. Note that this only really works for 
      Apache and other software that uses <code>.pem</code> files to store 
      certificates. Windows has its own opinions about how chains should be 
      built that are difficult to influence. For maximum compatibility with 
      legacy clients we recommend using an alternative provider like <a href="https://zerossl.com">ZeroSSL</a>.

Execution:
  DefaultPreExecutionScript:
    type: string
    subtype: path
    description: Path to a script that is executed before renewing a 
      certificate. This may be useful to temporarely relax security measures, 
      e.g. opening port 80 on the firewall.

  DefaultPostExecutionScript:
    type: string
    subtype: path
    description: Path to a script that is called after renewing a certificate, 
      this may be useful to undo any actions taken by the script configured as 
      the <code>DefaultPreExecutionScript</code>. Not to be confused with the 
      <a href="/reference/plugins/installation/script">script installation</a> 
      plugin. The difference is that the installation plugin can be configured 
      separately for each renewal and has access to a lot more context about
      the new and previous certificates. Also when the installation script 
      fails, the renewal will be retried later. That is not the case for the 
      pre/post execution scripts. Any errors there are logged but otherwise 
      ignored.

Proxy:
  Url: 
    type: string
    subtype: uri
    default: "[system]"
    description: Configures a proxy server to use for communication with the 
      ACME server and other HTTP requests done by the program.<br><br>
      <table>
        <tr><th class="col-md-3">Value</th><th>Meaning</th></tr>
        <tr><td><code>"[system]"</code></td><td>Equivalent to <code>"[wininet]"</code></td></tr>
        <tr><td><code>"[wininet]"</code></td><td>Auto-discover proxy settings using the legacy Windows Internet API.</td></tr>
        <tr><td><code>"[winhttp]"</code></td><td>Auto-discover proxy settings using the modern Windows HTTP API. Honestly this should be the default, but isn't because of backwards compatiblity.</td></tr>
        <tr><td>Url</td><td>Explictly define a proxy url</td></tr>
        <tr><td>Emtpy</td><td>Try to bypass the system proxy</td></tr>        
      </table>

  Username:
    type: string
    description: Username used to access the proxy server.

  Password:
    type: string
    subtype: secret
    description: Password used to access the proxy server.

Cache:
  Path: 
    type: string
    subtype: path
    description: The path where certificates, request files and private keys 
      are cached. If you are using <a href="/reference/plugins/store/centralssl">CentralSsl</a>, 
      this can not be set to the same path.
    nullBehaviour: defaults to <code>{Client.ConfigurationPath}\Certificates</code>. 

  ReuseDays:
    type: number
    default: 1
    description: When renewing or re-creating a previously requested certificate 
      that has the exact same set of domain names, the program will used a cached 
      version for this many days, to prevent users from running into <a href="https://letsencrypt.org/docs/rate-limits/">rate limits</a> 
      while experimenting. Set this to a high value if you regularly re-request 
      the same certificates, e.g. for a Continuous Deployment scenario. 
    
      Setting this to <code>0</code> will not entirely disable the cache (the program also 
      needs the files for different reasons), but it will prevent the files from 
      being used for renewals and will also ensure that no private key material 
      is stored in the cache, unless specifically requested by 
      <code>‑‑reuse-privatekey</code>.

  DeleteStaleFiles:
    type: boolean
    default: 'false'
    description: Automatically delete files older than <code>DeleteStaleFileDays</code> 
      many days from the folder <code>{Cache.Path}</code>. Running with default settings, 
      these should only be long-expired certificates, generated for abandoned renewals.
  
  DeleteStaleFileDays:
    type: number
    default: 120
    description: This value should be increased if you are working with 
      long-lived certificates and enable <code>DeleteStaleFiles</code>.

ScheduledTask:
  RenewalDays:
    type: number
    default: 55
    description: The number of days to renew a certificate after. Let's Encrypt 
      certificates are currently for a max of 90 days so it is advised to not 
      increase the days much. If you increase the days, please note that you 
      will have less time to fix any issues if the certificate doesn't renew 
      correctly.

  RenewalDaysRange:
    type: number
    default: 0
    description: To spread service load, program run time and/or to minimize 
      downtime, those managing a large amount of renewals may want to spread 
      them out of the course of multiple days/weeks. The number of days 
      specified here will be substracted from <code>RenewalDays</code> to 
      create a range within which the renewal will e processed. E.g. if 
      <code>RenewalDays</code> is <code>55</code> and <code>RenewalDaysRange</code> is <code>10</code>, 
      the renewal will be processed between <code>45</code> and <code>55</code> days after issuing.

      If you use an order plugin to split your renewal into multiple orders, 
      orders may run on different days.

  RenewalDisableServerSchedule:
    type: boolean
    default: 'false'
    description: By default, servers implementing ARI may suggest that 
      renewals should happen earlier than the regularly scheduled moment. 
      When set to <code>true</code>, ARI suggestions will be ignored 
      (not recommended).

  RenewalMinimumValidDays:
    type: number
    default: 7
    description: The minimum number of days a certificate should still be 
      valid. If the certificate is valid for a smaller number of days, it 
      will be renewed regardless of the <code>RenewalDays</code> setting.

  StartBoundary:
    type: string
    subtype: time
    default: '09:00:00'
    defaultExtra: 9:00 am
    description: Configures start time for the scheduled task.
    
  ExecutionTimeLimit:
    type: string
    subtype: time
    default: '02:00:00'
    defaultExtra: 2 hours
    description: Configures time after which the scheduled task will be terminated if it hangs for whatever reason.

  RandomDelay:
    type: string
    subtype: time
    default: '04:00:00'
    defaultExtra: 4 hours
    description: Configures random time to wait for starting the scheduled task. This 
      spreads the load on the servers and thus prevents users from getting 
      <code>TooManyRequests</code> errors.

Notifications:
  SmtpServer:
    type: string
    subtype: host
    description: SMTP server to use for sending email notifications. Required to receive renewal failure notifications.    
    
  SmtpPort:
    type: number
    default: 25
    description: SMTP server port number.

  SmtpUser:
    type: string
    description: User name for the SMTP server, in case of authenticated SMTP.

  SmtpPassword:
    type: string
    subtype: secret
    description: Password for the SMTP server, in case of authenticated SMTP.

  SmtpSecure:
    type: boolean
    default: 'false'
    description: Change to <code>true</code> to enable secure SMTP.

  SmtpSecureMode:
    type: number
    default: 1
    description: 
      <table>
        <tr><th class="col-md-3">Value</th><th>Meaning</th></tr>
        <tr><td>1</td><td>Automatic (based on port number)</td></tr>
        <tr><td>2</td><td>Implicit TLS</td></tr>
        <tr><td>3</td><td>Explicit TLS (required)</td></tr>
        <tr><td>4</td><td>Explicit TLS (when available)</td></tr>
      </table>

  SmtpSenderName:
    type: string
    description: Display name to use as the sender of notification emails.
    nullBehaviour: equivalent to <code>{Client.ClientName}</code>.
    
  SenderAddress:
    type: string
    subtype: email
    description: Email address to use as the sender of notification emails. Required to receive renewal notifications.

  ReceiverAddresses:
    type: string[]
    subtype: email
    description: 
      Email address to use as the sender of notification emails. 
      Required to receive renewal failure notifications. The correct 
      format for the receiver is <code>["example@example.com"]</code> for a 
      single address and <code>["example1@example.com", "example2@example.com"]</code> 
      for multiple addresses.

  EmailOnSuccess:
    type: boolean
    default: 'false'
    description: 
      Send an email notification when a certificate has been successfully 
      created or renewed, as opposed to the default behavior that only send 
      failure notifications. Only works if at least <code>SmtpServer</code>, 
      <code>SmtpSenderAddress</code> and <code>SmtpReceiverAddress</code> have 
      been configured.

  ComputerName:
    type: string
    description: This value replaces the Windows machine name reported in emails.

Security:
  EncryptConfig:
      type: boolean
      default: true
      description: 
        Uses Microsoft Data Protection API to encrypt sensitive 
        parts of the configuration, e.g. passwords. This may be disabled 
        to share the configuration across a cluster of machines. Not 
        supported on Linux.

  FriendlyNameDateTimeStamp:
      type: boolean
      default: true
      description:
        Add the issue date and time to the friendly name of requested 
        certificates. If you require full control over the final 
        certificate friendly name this feature should be disabled.

Script:
  Timeout:
    type: number
    default: 600
    description: Time in seconds to allow installation and DNS scripts to run before terminating them forcefully.

  PowershellExecutablePath:
    type: string
    subtype: path
    default: "powershell.exe"
    description: 
      Customize this value to use a different version of Powershell to 
      execute <code>.ps1</code> scripts. E.g. 
      <code>C:\\Program Files\\PowerShell\\6.0.0\\pwsh.exe</code> for 
      Powershell Core 6.

Source:
  DefaultSource:
    type: string
    description: Default source plugin. This only affects the menu in the UI.
    nullBehaviour: equivalent to <code>"iis"</code>, with 
      <code>"manual"</code> as backup for unprivileged users or systems 
      without IIS.

Validation:
  DefaultValidation:
    type: string
    description: Default validation plugin.
    nullBehaviour: equivalent to <code>"selfhosting"</code>, with <code>"filesystem"</code> 
      as backup for unprivileged users.

  DefaultValidationMode:
    type: string
    description: Default validation method.
    nullBehaviour: equivalent to <code>"http-01"</code>

  DisableMultiThreading:
    type: boolean
    default: true
    description: Disable multithreading features for validation. Inceases runtime but may help to fix bugs caused by race conditions.

  ParallelBatchSize:
    type: number
    default: 100
    description: Maximum number of validations to run simultaneously. We 
      recommend limiting this to about <code>20</code> to prevent issues like 
      overrunning the maximum size of a DNS response. The default is set to 
      <code>100</code> for backwards compatibility reasons.

  CleanupFolders:
    type: boolean
    default: true
    description: If set to <code>true</code>, the program will automatically
      delete file it created after HTTP validation is complete. It will also
      cleanup the <code>./well-known/acme-challenge</code> folder, if 
      (and only if) there are no other files present.

  PreValidateDns:
    type: boolean
    default: true
    description: If set to <code>true</code>, it will wait until it can verify 
      that the validation record has been created and is available before 
      beginning DNS validation.

  PreValidateDnsRetryCount:
    type: number
    default: 5
    description: Maximum numbers of times to retry DNS pre-validation, 
      while waiting for the name servers to start providing the expected answer.

  PreValidateDnsRetryInterval:
    type: number
    default: 30
    description: Amount of time in seconds to wait between each retry.

  AllowDnsSubstitution:
    type: boolean
    default: true
    description: If your goal is to get a certificate for <code>example.com</code> 
      using DNS validation, but the DNS service for that domain does not support 
      automation, there is no plugin available for it and/or your security 
      policy doesn't allow third party tools like simple-acme to access the 
      DNS configuration, then you can set up a <code>CNAME</code> from 
      <code>_acme-challenge.example.com</code> to another (sub)domain under 
      your control that doesn't have these limitations. 

      <a href="/reference/plugins/validation/dns/acme-dns">acme-dns</a> is 
      based on this principle, but the same trick can be applied to any of the 
      <a href="/reference/plugins/validation/dns/">DNS plugins</a>. Set this 
      value to <code>false</code> to disable the feature.

      Note that for the program to understand your DNS setup, the 
      <code>CNAME</code> record will have to visibile to it. If you have a 
      complicated DNS setup with an internal-facing "split brain" that is 
      lacking the relevant records, you can let simple-acme use a public DNS 
      server like <code>1.1.1.1</code> instead of your system server using the next 
      setting.

  DnsServers:
    type: string[]
    subtype: host
    default: "[ \"[System]\" ]"
    description: A list of servers to query during DNS prevalidation checks 
      to verify whether or not the validation record has been properly 
      created and is visible for the world. These servers will be used to 
      locate the actual authoritative name servers for the domain. You can 
      use the string <code>"[System]"</code> to have the program query your 
      default name servers.

  Ftp:
    UseGnuTls:
      type: boolean
      default: 'false'
      description: If you experience connection issues with Unix FTPS servers, 
        using the GnuTLS library instead of Microsofts native TLS implementation
        might solve the problem. <a href="https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Connection-using-GnuTLS">This page</a> 
        by the FluentFTP project explains the reasons behind and limitations 
        of this method. Note that it's not enough to merely change this 
        setting, check the documentation of the FTP plugin for more details.

Order:
  DefaultOrder:
    type: string
    description: Default order plugin.
    nullBehaviour: equivalent to <code>"single"</code>

  DefaultValidDays:
    type: number
    description: Number of days requested certificates should remain valid. 
      Note that not all servers support this property. Specifically Let's 
      Encrypt throws an error when using this at the time of writing.

Csr:
  DefaultCsr:
    type: string
    description: Default CSR plugin.
    nullBehaviour: equivalent to <code>"rsa"</code>

  Rsa:
    KeyBits:
      type: number
      default: 3072
      description: The number of bits to use for RSA private keys, ultimately 
        determining the strength of the encryption. Minimum is 2048.

    SignatureAlgorithm:
      type: string
      default: SHA512withECDSA
      description: Algorithm to use to sign CSR with RSA public key. Full 
        list of possible options available <a href="https://github.com/bcgit/bc-csharp/blob/master/crypto/src/cms/CMSSignedGenerator.cs">here</a>. 
        Note that not all servers will support all types of signatures.

  Ec:
    CurveName: 
      type: string
      default: secp384r1
      description: The curve used to use to generated key pairs on.

    SignatureAlgorithm:
      type: string
      default: SHA512withECDSA
      description: Algorithm to use to sign CSR with EC public key. Full list
        of possible options available <a href="https://github.com/bcgit/bc-csharp/blob/master/crypto/src/cms/CMSSignedGenerator.cs">here</a>. 
        Note that not all servers will support all types of signatures.

Store:
  DefaultStore:
    type: string
    description: Default store plugin(s). This may be a comma separated value for multiple default store plugins.
    nullBehaviour: equivalent to <code>"certificatestore"</code>

  CertificateStore:
    DefaultStore:
      type: string
      description: The name of the certificate store to save the certificates in.
      nullBehaviour: certificates will be installed either in the 
        <code>"WebHosting"</code> store, or if that is not available, 
        the <code>"My"</code> store (better known in the Microsoft 
        Management Console as as <code>"Personal"</code>)

    PrivateKeyExportable:
      type: boolean
      default: 'false'
      description: If set to true, private keys stored in the 
        Windows Certificate Store will be marked as exportable, 
        allowing you to transfer them to other computers. Note that 
        this setting doesn't apply retroactively but only to certificates 
        issued from the moment that setting has changed. For tips about 
        migration please refer to <a href="/manual/migration">this page</a>.

    UseNextGenerationCryptoApi:
      type: boolean
      default: 'false'
      description: "If set to true, the program will use the <a href=\"https://learn.microsoft.com/en-us/windows/win32/seccng/about-cng\">Cryptography 
        API</a>: Next Generation (CNG) to handle private keys, instead of 
        the legacy CryptoAPI. Note that enabling this option may make 
        the certificates unusable or behave differently in subtle ways 
        for software that only supports or assumes the key to exist in 
        CryptoAPI. For example it will not work for older versions of 
        Microsoft Exchange and it won't be exportable from IIS, even if 
        the <code>PrivateKeyExportable</code> setting is <code>true</code> 
        (though it will be exportable from MMC)."

  CentralSsl:
    DefaultPath:
      type: string
      subtype: path
      description: When using the <a href="/reference/plugins/store/centralssl">CentralSsl</a> 
        plugin this path is used by default, saving you the effort of providing 
        it manually. Filling this out makes the <code>‑‑centralsslstore</code> 
        parameter unnecessary in most cases. Renewals created with the 
        default path will automatically change to any future default value, 
        meaning this is also a good practice for maintainability.

    DefaultPassword:
      type: string
      subtype: secret
      description: When using the <a href="/reference/plugins/store/centralssl">CentralSsl</a> 
        plugin this password is used by default for the <code>.pfx</code> 
        files, saving you the effort from providing it manually. Filling 
        this out makes the <code>‑‑pfxpassword</code> parameter unnecessary 
        in most cases. Renewals created with the default password will 
        automatically change to any future default value, meaning this 
        is also a good practice for maintainability.

  PemFiles:
    DefaultPath:
      type: string
      subtype: path
      description: When using the <a href="/reference/plugins/store/pemfiles">PemFiles</a> 
        plugin this path is used by default, saving you the effort of providing 
        it manually. Filling this out makes the <code>‑‑pemfilespath</code> 
        parameter unnecessary in most cases. Renewals created with the 
        default path will automatically change to any future default value, 
        meaning this is also a good practice for maintainability.

    DefaultPassword:
      type: string
      subtype: secret  
      description: When using the <a href="/reference/plugins/store/pemfiles">PemFiles</a>
        plugin this password is used by default for the <code>.pem</code> files, 
        saving you the effort from providing it manually. Filling this out 
        makes the <code>‑‑pempassword</code> parameter unnecessary in most 
        cases. Renewals created with the default password will automatically 
        change to any future default value, meaning this is also a good 
        practice for maintainability.

  PfxFile:
    DefaultPath:
      type: string
      subtype: path
      description: When using the <a href="/reference/plugins/store/pfxfile">PFxFile</a> 
        plugin this path is used by default, saving you the effort of providing 
        it manually. Filling this out makes the <code>‑‑pfxfilepath</code> 
        parameter unnecessary in most cases. Renewals created with the 
        default path will automatically change to any future default value, 
        meaning this is also a good practice for maintainability.

    DefaultPassword: 
      type: string
      subtype: secret 
      description: When using the <a href="/reference/plugins/store/pfxfile">PFxFile</a>
        plugin this password is used by default for the <code>.pfx</code> files, 
        saving you the effort from providing it manually. Filling this out 
        makes the <code>‑‑pfxpassword</code> parameter unnecessary in most 
        cases. Renewals created with the default password will automatically 
        change to any future default value, meaning this is also a good 
        practice for maintainability.

Installation:
  DefaultInstallation:
      type: string
      description: Default installation plugin(s). This may be a comma 
        separated value for multiple default installation plugins.
      nullBehaviour: equivalent to <code>"none"</code> for most unattended 
        usage (unless <code>‑‑source iis</code> is provided) and 
        <code>"iis"</code> for interactive mode

Secrets:
  Json:
    FilePath:
      type: string
      subtype: path  
      description: Location of the file store secrets.
      nullBehaviour: defaults to <code>{Client.ConfigurationPath}\secrets.json</code>